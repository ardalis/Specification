trigger:
  branches:
      include:
      - master
      - refs/tags/*
pr:
- master

pool:
  # vmImage: 'windows-2019'
  vmImage: 'ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/*.sln'
  disable.coverage.autogenerate: 'true'

steps:

- task: DotNetCoreCLI@2
  displayName: 'dotnet info'
  inputs:
    command: custom
    custom: '--info'

- task: DotNetCoreCLI@2
  displayName: 'dotnet version'
  inputs:
    command: custom
    custom: '--version'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.3'
  inputs:
    versionSpec: 4.9.3

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# Build    
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    #solution: '$(solution)'
    #platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    arguments: '--output $(Build.ArtifactStagingDirectory)'

- script: dir
  workingDirectory: $(Build.ArtifactStagingDirectory)
  displayName: List output folder contents

# Test with Coverage

- script: docker-compose up --abort-on-container-exit
  displayName: Run Docker Compose Up  

# Bug Workaround: https://github.com/microsoft/azure-pipelines-tasks/issues/8762
#- script: sudo mkdir -p $(Build.SourcesDirectory)/TestResults/coverage/summary$(Build.BuildId)
#  displayName: Create summary folder

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline

#- script: dir
#  workingDirectory: $(Build.SourcesDirectory)
#  displayName: List root folder contents
  
#- script: dir
#  workingDirectory: $(Build.SourcesDirectory)/TestResults
#  displayName: List root/TestResults folder contents
  
#- script: dir
#  workingDirectory: $(Build.SourcesDirectory)/TestResults/coverage
#  displayName: List root/TestResults/coverage folder contents
  
#- script: chmod 777 . -R
#  workingDirectory: $(Build.SourcesDirectory)

- task: PublishTestResults@1
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '**/TEST-*.trx'

#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish code coverage'
#  inputs:
#    codeCoverageTool: Cobertura
#    summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/coverage/Cobertura.xml'
#    reportDirectory: '$(Build.SourcesDirectory)/TestResults/coverage'

- task: CopyFiles@2
  displayName: 'Copy *.nupkg Files (from artifact directory to Package folder)'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**/*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/Package'
    flattenFolders: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# Publish
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Package'
    artifactName: Package
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
